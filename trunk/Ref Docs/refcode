static bit bLastCLRT;
    static unsigned char ucByte,
                         ucFec;

    if(PLM_pinCLRT){                                                // PLM clock is 1
        if(!bLastCLRT){                                                // transition 0 -> 1
            bLastCLRT = 1;                                            // update last CLRT value

            switch(ucState){
                

                case PLM_RX_PREAMBLE:
                    ucState++;
                    break;

                case PLM_RX_HEADER_HIGH:
                    ucByte = (ucByte << 1) | PLM_pinRxD;            // receive 1 bit and store it

                    if(ucByte == HEADER_HIGH_ACK){
                        bAck = 1;

                        ucBitCounter = 8;
                        ucState++;
                    }

                    if(ucByte == HEADER_HIGH_DATA){
                        bAck = 0;

                        ucBitCounter = 8;
                        ucState++;
                    }

                    break;

                case PLM_RX_HEADER_LOW:
                    ucByte = (ucByte << 1) | PLM_pinRxD;            // receive 1 bit and store it
                    ucBitCounter--;

                    if(!ucBitCounter){
                        if(ucByte == HEADER_LOW){
                            if(bAck){
                                ucByteCounter = 2;                    // only FCS
                            }

                            ucBitCounter = 8;
                            ucFec = 0;
                            ucState++;
                        }
                        else{
                            ucState = PLM_RX_PREAMBLE;
                        }
                    }
                    break;
    
                case PLM_RX_DATA:
                    ucByte = (ucByte << 1) | PLM_pinRxD;            // receive 1 bit and store it
                    ucBitCounter--;

                    ucFec = (ucFec << 1) | PLM_pinRxD;
                    if(ucFec & 0x40){
                        ucFec ^= 0x39;
                    }

                    if(!ucBitCounter){
                        ucBitCounter = 6;
                        ucState++;
                    }

                    break;

                case PLM_RX_FEC:
                    ucFec = (ucFec << 1) | ~PLM_pinRxD;
                    ucBitCounter--;

                    if(ucFec & 0x40){
                        ucFec ^= 0x39;
                    }

                    if(!ucBitCounter){
                        ucFec &= 0x3f;
                        if(ucFec){
                            ucByte ^= ucCRC[ucFec];
                            ucCorrectionCounter++;
                        }

                        ucPacket[ucIndex++] = ucByte;
                        ucByteCounter--;

                        if(!ucByteCounter){
                            ucState = PLM_STOP;                        // stop PLM            
      
                            PLM_pinRXTX = 1;                        // Rx session
                            PLM_pinREG_DATA = 0;                    // mains access

                            return;
                        }

                        ucBitCounter = 8;
                        ucFec = 0;
                        ucState = PLM_RX_DATA;
                    }

                    break;
            }
        }
    }
    else{                                                            // PLM clock is 0
        if(bLastCLRT){                                                // transition 1 -> 0
            bLastCLRT = 0;                                            // update last CLRT value

            switch(ucState){
                case PLM_STOP:
                    break;

                

                case PLM_TX_PREAMBLE:
                    PLM_pinTxD = --ucBitCounter & 0x01;

                    if(!ucBitCounter){
                        if(bAck){
                            ucByte = HEADER_HIGH_ACK;
                        }
                        else{
                            ucByte = HEADER_HIGH_DATA;
                        }
                        ucBitCounter = 8;
                        ucState++;
                    }
                    break;

                case PLM_TX_HEADER_HIGH:
                {
                    if(ucByte & 0x80){
                        PLM_pinTxD = 1;
                    }else{
                        PLM_pinTxD = 0;
                    }
                    ucByte <<= 1;
                    ucBitCounter--;

                    if(!ucBitCounter){
                        ucByte = HEADER_LOW;
                        ucBitCounter = 8;
                        ucState++;
                    }
                    break;
                }
                case PLM_TX_HEADER_LOW:
                    PLM_pinTxD = ucByte & 0x80;
                    ucByte <<= 1;
                    ucBitCounter--;

                    if(!ucBitCounter){
                        ucByte = ucPacket[ucIndex++];
                        ucBitCounter = 8;
                        ucByteCounter--;
                        ucFec = 0;
                        ucState++;
                    }

                    break;

                case PLM_TX_DATA:
                    PLM_pinTxD = ucByte & 0x80;
                    ucByte <<= 1;
                    ucBitCounter--;

                    ucFec = (ucFec << 1) | PLM_pinTxD;
                    if(ucFec & 0x40){
                        ucFec ^= 0x39;
                    }

                    if(!ucBitCounter){
                        ucBitCounter = 6;
                        while(ucBitCounter){
                            ucFec <<= 1;
                            if(ucFec & 0x40){
                                ucFec ^= 0x39;
                            }
                            ucBitCounter--;
                        }
                        ucFec ^= 0xff;

                        ucBitCounter = 6;
                        ucState++;
                    }
                    break;

                case PLM_TX_FEC:
                    PLM_pinTxD = ucFec & 0x20;
                    ucFec <<= 1;
                    ucBitCounter--;

                    if(!ucBitCounter){
                        if(!ucByteCounter){
                            ucFec = PLM_pinTxD ^ 0x01;
                            ucBitCounter = ucPostableBits;
                            ucState++;                                // postamble
                        }
                        else{
                            ucByte = ucPacket[ucIndex++];
                            ucBitCounter = 8;
                            ucByteCounter--;
                            ucFec = 0;
                            ucState = PLM_TX_DATA;
                        }
                    }
                    break;

                case PLM_TX_POSTAMBLE:
                    PLM_pinTxD = ucFec;
                    ucBitCounter--;

                    if(!ucBitCounter){
                        ucState = PLM_STOP;

                        PLM_pinRXTX = 1;                            // Rx session
                        PLM_pinREG_DATA = 0;                        // mains access
                    }
                    break;
            }
        }   
    }